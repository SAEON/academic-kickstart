#as
#dev.off()
#png("/Users/jasper/GIT/Jonkershoek/Output/dwarsberg_annual_streamflow2016.png", height = 5, width = 12, units = "in", res=600)
#as
#dev.off()
###Fetch weather data
#Historical data from Cape Nature 17B
cn <- read_excel("Weatherdata/Monthly high elevation rainfall_Cape Nature.xls", sheet = 4, skip = 1)
mcn <- melt(cn[,1:13], id = "Year")
mcn$Date <- as.Date(paste0(mcn$Year, "-", as.numeric(mcn$variable), "-01"), format = "%Y-%m-%d", tz="Africa/Johannesburg")
dbgH <- xts(mcn$value, order.by = mcn$Date)
#dbgH <- read.csv("Weatherdata/Dwarsberg rainfall data_Jasper/Historic Dwarsberg rainfall 2_Allsopp2015.csv")
#dbgH$Comment <- rep("", nrow(dbgH))
#dbgH$Date <- strptime(substr(dbgH$Date, 1, 10), format = "%Y-%m-%d")#, tz="Africa/Johannesburg")
#dbgH <- xts(dbgH$Value, order.by = dbgH$Date)
#New
dbgHrs <- read.csv("Weatherdata/Dwarsberg rainfall data_Jasper/Dwarsberg hourly rainfall.csv")
x <- gsub("T", " ", dbgHrs$Date)
x <- gsub("+02:00", "", x, fixed=T)
x <- gsub(".000", "", x, fixed=T)
dbgHrs$Date <- strptime(x, format = "%Y-%m-%d %H:%M:%S")#, tz="Africa/Johannesburg")
dbgHrs <- xts(dbgHrs$DataValue, order.by = dbgHrs$Date)
dbgN <- apply.monthly(dbgHrs, "sum", na.rm=F)
index(dbgN) <- as.Date(paste0(substr(index(dbgN), 1, 7), "-01"), format = "%Y-%m-%d")
#Bind data
dbgm <- c(dbgH["/2013-02-01"], dbgN)
names(dbgm) <- "Summed.rainfall"
# dbg <- rbind(dbgH, dbgN)
# x <- substr(dbg$Date, 1, 10)
# #x <- gsub("T", " ", dbg$Date)
# #x <- gsub("+02:00", "", x, fixed=T)
# #dbg$Date <- strptime(x, format = "%Y-%m-%d %H:%M:%S", tz="Africa/Johannesburg")
# dbg$Date <- strptime(x, format = "%Y-%m-%d", tz="Africa/Johannesburg")
# dbg <- xts(dbg$Value, order.by = dbg$Date)
# #dbg <- merge(dbg, timeBasedSeq(paste("1991-09-01", end(dbg), sep="::"))) #Fill in missing dates (with NA)
# #dbg <- na.approx(dbg, maxgap=720) #interpolate missing values (up to a day)
# tzone(dbg) <- "Africa/Johannesburg"
#Calculate monthly and annual summaries
dbgm <- dbgm[-nrow(dbgm),] #Drop last current (incomplete) month
dbga <- apply.yearly(dbgm, "sum", na.rm=F)
dbga <- dbga[-nrow(dbga),] #Drop last current (incomplete) year
#Make summaries for barplot
xR <- as_tibble(data.frame(Rainfall = dbgm[,1], Date = time(dbgm)))
sumsR <- summarise(group_by(xR, months(Date, abbreviate=T)), mean(Summed.rainfall, na.rm=T))
colnames(sumsR) <- c("Month", "Rainfall")
sumsR$Month <- as.factor(sumsR$Month)
sumsR$Month <- reorder(sumsR$Month, c(4,8,12,2,1,7,6,3,5,11,10,9)) #c(5,4,8,1,9,7,6,2,12,11,10,3))
sumsR <- sumsR[order(sumsR$Month),]
#summarise(group_by(xR, months(Date, abbreviate=T)), min(Summed.rainfall, na.rm=T))
#Minimum by month
#test <- subset(xR, months(Date, abbreviate=T) == "Jul") #Select a month
#test[order(test$Summed.rainfall),]
#test <- subset(xR, months(Date, abbreviate=T) %in% month.abb) #Select a month
#test[order(test$Summed.rainfall),]
#Calculate confidence intervals
sds <- summarise(group_by(xR, months(Date, abbreviate=T)), sd(Summed.rainfall, na.rm=T)) #Standard deviation
colnames(sds) <- c("Month", "Summed.rainfall")
sds$Month <- as.factor(sds$Month)
sds$Month <- reorder(sds$Month, c(4,8,12,2,1,7,6,3,5,11,10,9)) #c(5,4,8,1,9,7,6,2,12,11,10,3)
sds <- sds[order(sds$Month),]
sumsR$RainfallCI <- (sds$Summed.rainfall / sqrt(nrow(xR)/12)) *qt(0.975/2 + .5, sqrt(nrow(xR)/12-1)) #convert to standard error and then confidence interval
#Calculate cumulative rainfall
m2015 <- data.frame(Month = levels(sumsR$Month), Rainfall = as.numeric(dbgm["2015"]), RainfallCI = NA) # All months in 2015
m2016 <- as.numeric(dbgm["2016"])
m2016 <- data.frame(Month = levels(sumsR$Month)[1:length(m2016)], Rainfall = m2016, RainfallCI = NA) # All months in 2016
m2017 <- as.numeric(dbgm["2017"])
m2017 <- data.frame(Month = levels(sumsR$Month)[1:length(m2017)], Rainfall = m2017, RainfallCI = NA) # All months in 2017
m2018 <- as.numeric(dbgm["2018"])
m2018 <- data.frame(Month = levels(sumsR$Month)[1:length(m2018)], Rainfall = m2018, RainfallCI = NA) # All months in 2018
m2019 <- as.numeric(dbgm["2019"])
m2019 <- data.frame(Month = levels(sumsR$Month)[1:length(m2019)], Rainfall = m2019, RainfallCI = NA) # All months in 2019
m2020 <- as.numeric(dbgm["2020"])
m2020 <- data.frame(Month = levels(sumsR$Month)[1:length(m2020)], Rainfall = m2020, RainfallCI = NA) # All months in 2019
sumsR$Cumulative_Rainfall <- cumsum(sumsR$Rainfall)
m2015$Cumulative_Rainfall <- cumsum(m2015$Rainfall)
m2016$Cumulative_Rainfall <- cumsum(m2016$Rainfall)
m2017$Cumulative_Rainfall <- cumsum(m2017$Rainfall)
m2018$Cumulative_Rainfall <- cumsum(m2018$Rainfall)
m2019$Cumulative_Rainfall <- cumsum(m2019$Rainfall)
m2020$Cumulative_Rainfall <- cumsum(m2020$Rainfall)
monthvalsR <- rbind(sumsR, m2015, m2016, m2017, m2018, m2019, m2020)
monthvalsR$Time <- c(rep("Mean (1945 to current)", 12), rep("2015", 12), rep("2016", nrow(m2016)), rep("2017", nrow(m2017)), rep("2018", nrow(m2018)), rep("2019", nrow(m2019)), rep("2020", nrow(m2020)))
monthvalsR$Missing <- ""
monthvalsR$Missing[which(monthvalsR$Time==2015 & monthvalsR$Month %in% c("May", "Jun", "Jul"))] <- "*"
#Calculate annual summer and winter rainfall
#Calculate Summer rainfall
Summer1 = apply.yearly(dbgm[.indexmon(dbgm) %in% 9:11], "sum", na.rm=F)  # last summer months for all years (note zero-based indexing!)
Summer2 = apply.yearly(dbgm[.indexmon(dbgm) %in% 0:2], "sum", na.rm=F)  # Summer months for all years (note zero-based indexing!)
Summer1$Year <- format(index(Summer1),"%Y")
Summer2$Year <- format(index(Summer2),"%Y")
Summer2$Year <- Summer2$Year - 1
names(Summer1)[1] <- "Rain"
Hmm <- merge(as.data.frame(Summer1), as.data.frame(Summer2))
Summer <- data.frame(Year = Hmm$Year, Summed.rainfall = rowSums(Hmm[,2:3]), Season = "Summer")
#Calculate Winter rainfall
Winter = apply.yearly(dbgm[.indexmon(dbgm) %in% c(3:8)], "sum", na.rm=F)
Winter$Year <- format(index(Winter),"%Y")
Winter <- as.data.frame(Winter)
Winter$Season <- "Winter"
if (length(which(Winter$Year == format(Sys.time(), "%Y")))>1) {
if (format(Sys.time(), "%m")<10) {Winter <- Winter[-which(Winter$Year == format(Sys.time(), "%Y")),]}} #Drop current year if "winter" period is not complete
#Highlight driest summers and winters
Winter$Season[which(Winter$Summed.rainfall < quantile(Winter$Summed.rainfall, 0.1))] <- "Winter (lowest 10%)"
Summer$Season <- as.character(Summer$Season)
Summer$Season[which(Summer$Summed.rainfall < quantile(Summer$Summed.rainfall, 0.1, na.rm = T))] <- "Summer (lowest 10%)"
#Combine summer and winter rainfall
dat <- rbind(Winter, Summer)
#dat$Year <- as.factor(dat$Year)
ar <- ggplot(dat, aes(Year, y = Summed.rainfall, fill=as.factor(Season))) +
geom_bar(stat="identity") +
scale_x_continuous(limits = c(1960, NA), breaks = seq(1960, max(sdat$Year)+5, 5)) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
ylab(bquote("Rainfall (mm)")) +
geom_hline(yintercept = mean(dbga, na.rm = T)) +
geom_vline(xintercept = 47.5, linetype=3) +
geom_vline(xintercept = 68.5, linetype=3) +
annotate("text", x = 4, y = mean(dbga, na.rm = T) + 200, label = "Average") +
annotate("text", x = (47+68)/2, y = -100, angle=0, label = "Volunteer data (1992-2013)") +
scale_fill_manual(name="",values=c("#D6604D", "goldenrod1", "#4393C3", "slateblue4"))
#pdf("/Users/jasper/GIT/Jonkershoek/Output/dwarsberg_annual_rainfall2016.pdf", height = 5, width = 12)
#ar
#dev.off()
#png("/Users/jasper/GIT/Jonkershoek/Output/dwarsberg_annual_rainfall2016.png", height = 5, width = 12, units = "in", res=600)
#ar
#dev.off()
#write.csv(as.data.frame(dbgm), "/Users/jasper/Dropbox/Public/DwarsbergMonthlyRainfallSept2018.csv", row.names = T)
#write.csv(as.data.frame(langIm), "/Users/jasper/Dropbox/Public/LangrivierMonthlyStreamflowSept2018.csv")
blogdown:::serve_site()
install.packages("widgetframe")
install.packages("widgetframe")
blogdown:::serve_site()
?framewidget
?widgetframe
??widgetframe
?summarize
library(dplyr)
?summarize
library(sf)
veg <- st_read("SANBI_biome")
veg <- st_read("/media/jasper/JasperSAEON/jasperMac1July2019/GIS/RSA/VEGMAP2018_AEA_07012019_beta/VEGMAP2018_AEA_07012019_beta.lyr
")
veg <- st_read("x-special/nautilus-clipboard
copy
file:///media/jasper/JasperSAEON/jasperMac1July2019/GIS/RSA/VEGMAP2018_AEA_07012019_beta/VEGMAP2018_AEA_07012019_beta.lyr
")
veg <- st_read("file:///media/jasper/JasperSAEON/jasperMac1July2019/GIS/RSA/VEGMAP2018_AEA_07012019_beta/VEGMAP2018_AEA_07012019_beta.lyr
")
veg <- st_read("/media/jasper/JasperSAEON/jasperMac1July2019/GIS/RSA/VEGMAP2018_AEA_07012019_beta/VEGMAP2018_AEA_07012019_beta.lyr")
veg <- st_read("/media/jasper/JasperSAEON/jasperMac1July2019/GIS/RSA/VegMap/nvm2012beta2_wgs84_Geo/nvm2012beta2_wgs84_Geo.shp")
library(tidyverse)
names(veg)
df <- veg %>% group_by(BIOME) %>%
summarize()
blogdown:::serve_site()
blogdown::stop_server()
?methods
library(sf)
?st_sfc
6/7
5/7
5.5/7
library(rgbif)
install.packages("rgbif")
library(rgbif)
?occ_search
library(tidyverse)
library(RColorBrewer)
###Get soil moisture data
fls <- list.files("/home/jasper/Dropbox/Shared/Jonkershoek Weather and Streamflow/Soil moisture/", pattern = "Dwarsberg hourly VWC", full.names = T)
fls <- lapply(fls, read.csv, header = T)
###Fix date
fixdate <- function(x){
y <- gsub("T", " ", x$Date)
y <- gsub("+02:00", "", y, fixed=T)
y <- gsub(".000", "", y, fixed=T)
x$Date <- as.POSIXct(strptime(y, format = "%Y-%m-%d %H:%M:%S", tz="Africa/Johannesburg"))
return(x)
}
fls <- lapply(fls, fixdate)
###Add depth column
fls[[1]]$Depth <- -10
fls[[2]]$Depth <- -30
fls[[3]]$Depth <- -30
fls[[4]]$Depth <- -20
fls[[5]]$Depth <- -20
fls[[6]]$Depth <- -10
###Extract from list into one data.frame
dat <- do.call(rbind, fls)
dat$Year <- substr(dat$Date,1,4)
dat$DayOfYear <- yday(dat$Date)
library(lubridate)
dat$DayOfYear <- yday(dat$Date)
brewer.div <- colorRampPalette(brewer.pal(11, "Spectral"), interpolate = "spline")
pg <- ggplot(dat, aes(DayOfYear, Depth, fill = Value)) +
geom_tile() +
scale_fill_gradientn("Value", colours = brewer.div(200),
guide = guide_legend(title = "VWC (%)")) +
facet_grid(rows = vars(Year))
pg
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
if(Sys.getenv("USER") == "jasper") {setwd("/home/jasper/Dropbox/Shared/Jonkershoek Weather and Streamflow/")}
if(Sys.getenv("USERNAME") == "abri") {setwd("C://Dropbox//Shared//jonkershoek//")}
suppressWarnings(suppressMessages(library(xts, quietly=T, warn.conflicts=F))) #WARNING!!! Suppressing warnings like this is dodgy as it hides conflicts. If this script creates weird output or fails, run the internal "library(...)" separately for each package and see if it gives you important warnings...
suppressWarnings(suppressMessages(library(dygraphs, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(dplyr, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(ggplot2, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(readxl, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(reshape2, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(lubridate, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(RColorBrewer, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(wesanderson, quietly=T, warn.conflicts=F)))
suppressWarnings(suppressMessages(library(plotly, quietly=T, warn.conflicts=F)))
### Get Langrivier stream flow from the different instruments
#Orpheus Mini
om <- read.csv("Streamflow/Langrivier streamflow data_Jasper/Orpheus Mini.csv") #cumecs (m^3/s)
om <- om[-which(substr(om$Date, 15, 16) == "30"),] #remove half-hourly values
om$Value <- om$Value*3.6 #Convert to Total hourly streamflow volume in ML
om$Offering <- rep("Total hourly streamflow volume", nrow(om))
om$Symbol <- rep("ML", nrow(om))
#Belfort charts
bf <- read.csv("Streamflow/Langrivier streamflow data_Jasper/Belfort.csv") #m^3
bf$Value <- bf$DataValue/1000
bf <- bf[,which(colnames(bf)%in%colnames(om))]
#Kent charts - STILL NEED TO INCLUDE!!! - Having some wierd issue with merging and interpolating...
kt <- read.csv("Streamflow/Langrivier streamflow data_Jasper/Kent.csv") #m^3
kt$Value <- kt$DataValue/1000
kt <- kt[,which(colnames(kt)%in%colnames(om))]
#Combine instruments and reformat date
ldat <- bind_rows(kt, bf, om)
x <- gsub("T", " ", ldat$Date)
x <- gsub("+02:00", "", x, fixed=T)
x <- gsub(".000", "", x, fixed=T)
ldat$Date <- strptime(x, format = "%Y-%m-%d %H:%M:%S", tz="Africa/Johannesburg")
ldat$Value[which(ldat$Value==0)] <- NA
ldat$Instrument <- c(rep("Kent", nrow(kt)), rep("Belfort", nrow(bf)), rep("Orpheus mini", nrow(om)))
#Split, interpolate missing and [recombine -later (interpolation procedure messes up the Kent Chart data...)]
#ldk <- ldat[which(ldat$Instrument=="Kent"),] #Kent chart data
ldn <- ldat[-which(ldat$Instrument=="Kent"),] #Everything else...
#Get start and end of orpheus mini data
beginom <- head(ldat[which(ldat$Instrument=="Orpheus mini"),]$Date, 1)
endom <- tail(ldat[which(ldat$Instrument=="Orpheus mini"),]$Date, 1)
#Make data an xts object and interpolate
lang <- xts(ldn$Value, order.by = ldn$Date) #Make xts object
lang <- merge(lang, timeBasedSeq(paste(start(lang), end(lang), "H", sep="::"))) #Fill in missing dates (with NA)
#miss <- lang[which(is.na(lang))] # ID missing data
langI <- na.approx(lang, maxgap=720) #interpolate missing values (up to a month)
#bmiss <- langI[which(is.na(langI))] # ID big missing data that remains
tzone(langI) <- "Africa/Johannesburg"
names(langI) <- "Streamflow Volume" #"Streamflow Rate"
langId <- apply.daily(langI, "sum", na.rm=F)
langIm <- apply.monthly(langI, "sum", na.rm=F)
langIm <- langIm[-nrow(langIm),] #Remove most recent (i.e. incomplete) month
langIa <- apply.yearly(langI, "sum", na.rm=F)
langIa <- langIa[-nrow(langIa),] #Remove most recent (i.e. incomplete) year
#Make summaries for barplot
x <- as_tibble(data.frame(Streamflow = langIm[,1], Date = time(langIm)))
mmeans <- summarise(group_by(x, months(Date, abbreviate=T)), mean(Streamflow.Volume, na.rm=T))
colnames(mmeans) <- c("Month", "Streamflow")
mmeans$Month <- as.factor(mmeans$Month)
mmeans$Month <- reorder(mmeans$Month, c(4,8,12,2,1,7,6,3,5,11,10,9)) #c(5,4,8,1,9,7,6,2,12,11,10,3)
mmeans <- mmeans[order(mmeans$Month),]
#summarise(group_by(x, months(Date, abbreviate=T)), min(Streamflow.Volume, na.rm=T)) #Minimum by month
#test <- subset(x, months(Date, abbreviate=T) == "Aug") #Select a month
#test[order(test$Streamflow.Volume),]
#Calculate confidence intervals
sds <- summarise(group_by(x, months(Date, abbreviate=T)), sd(Streamflow.Volume, na.rm=T)) #Standard deviation
colnames(sds) <- c("Month", "Streamflow")
sds$Month <- as.factor(sds$Month)
sds$Month <- reorder(sds$Month, c(4,8,12,2,1,7,6,3,5,11,10,9)) #c(5,4,8,1,9,7,6,2,12,11,10,3)
sds <- sds[order(sds$Month),]
mmeans$StreamflowCI <- (sds$Streamflow / sqrt(nrow(x)/12)) *qt(0.975/2 + .5, sqrt(nrow(x)/12-1)) #convert to standard error and then confidence interval
#Calculate cummulative flows
m2015 <- data.frame(Month = levels(mmeans$Month), Streamflow = as.numeric(langIm["2015"]), StreamflowCI = NA) # All months in 2015
m2016 <- as.numeric(langIm["2016"])
m2016 <- data.frame(Month = levels(mmeans$Month)[1:length(m2016)], Streamflow = m2016, StreamflowCI = NA) # All months in 2016
m2017 <- as.numeric(langIm["2017"])
m2017 <- data.frame(Month = levels(mmeans$Month)[1:length(m2017)], Streamflow = m2017, StreamflowCI = NA) # All months in 2017
m2018 <- as.numeric(langIm["2018"])
m2018 <- data.frame(Month = levels(mmeans$Month)[1:length(m2018)], Streamflow = m2018, StreamflowCI = NA) # All months in 2018
m2019 <- as.numeric(langIm["2019"])
m2019 <- data.frame(Month = levels(mmeans$Month)[1:length(m2019)], Streamflow = m2019, StreamflowCI = NA) # All months in 2019
m2020 <- as.numeric(langIm["2020"])
m2020 <- data.frame(Month = levels(mmeans$Month)[1:length(m2020)], Streamflow = m2020, StreamflowCI = NA) # All months in 2020
m2021 <- as.numeric(langIm["2021"])
m2021 <- data.frame(Month = levels(mmeans$Month)[1:length(m2021)], Streamflow = m2021, StreamflowCI = NA) # All months in 2021
mmeans$Cumulative_Streamflow <- cumsum(mmeans$Streamflow)
m2015$Cumulative_Streamflow <- cumsum(m2015$Streamflow)
m2016$Cumulative_Streamflow <- cumsum(m2016$Streamflow)
m2017$Cumulative_Streamflow <- cumsum(m2017$Streamflow)
m2018$Cumulative_Streamflow <- cumsum(m2018$Streamflow)
m2019$Cumulative_Streamflow <- cumsum(m2019$Streamflow)
m2020$Cumulative_Streamflow <- cumsum(m2020$Streamflow)
m2021$Cumulative_Streamflow <- cumsum(m2021$Streamflow)
monthvals <- rbind(mmeans, m2015, m2016, m2017, m2018, m2019, m2020, m2021)
monthvals$Time <- c(rep("Mean (1961 to current)", 12), rep("2015", 12), rep("2016", nrow(m2016)), rep("2017", nrow(m2017)), rep("2018", nrow(m2018)), rep("2019", nrow(m2019)), rep("2020", nrow(m2020)), rep("2021", nrow(m2021)))
#Calculate annual summer and winter streamflow
#Calculate Summer streamflow
Summer1 = apply.yearly(langIm[.indexmon(langIm) %in% 9:11], "sum", na.rm=F)  # last summer months for all years (note zero-based indexing!)
Summer2 = apply.yearly(langIm[.indexmon(langIm) %in% 0:2], "sum", na.rm=F)  # Summer months for all years (note zero-based indexing!)
Summer1$Year <- format(index(Summer1),"%Y")
Summer2$Year <- format(index(Summer2),"%Y")
Summer2$Year <- Summer2$Year - 1
names(Summer1)[1] <- "Streamflow"
Hmm <- merge(as.data.frame(Summer1), as.data.frame(Summer2))
Summer <- data.frame(Year = Hmm$Year, Streamflow.Volume = rowSums(Hmm[,2:3]), Season = "Summer")
#Calculate Winter streamflow
Winter = apply.yearly(langIm[.indexmon(langIm) %in% c(3:8)], "sum", na.rm=F)
Winter$Year <- format(index(Winter),"%Y")
Winter <- as.data.frame(Winter)
Winter$Season <- "Winter"
if (length(which(Winter$Year == format(Sys.time(), "%Y")))>1) {
if (format(Sys.time(), "%m")<10) {Winter <- Winter[-which(Winter$Year == format(Sys.time(), "%Y")),]}} #Drop current year if "winter" period is not complete
#Highlight driest summers and winters
Winter$Season[which(Winter$Streamflow.Volume < quantile(Winter$Streamflow.Volume, 0.1, na.rm = T))] <- "Winter (lowest 10%)"
Summer$Season <- as.character(Summer$Season)
Summer$Season[which(Summer$Streamflow.Volume < quantile(Summer$Streamflow.Volume, 0.1, na.rm = T))] <- "Summer (lowest 10%)"
#Combine summer and winter streamflow
sdat <- rbind(Winter, Summer)
#sdat$Year <- as.factor(sdat$Year)
#Make plot
as <- ggplot(sdat, aes(Year, y = Streamflow.Volume, fill=as.factor(Season))) +
geom_bar(stat="identity") +
scale_x_continuous(limits = c(1960, NA), breaks = seq(1960, max(sdat$Year)+5, 5)) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
ylab(bquote("Streamflow (ML)")) +
geom_hline(yintercept = mean(langIa, na.rm = T)) +
#  geom_vline(xintercept = 47.5, linetype=3) +
annotate("text", x = 5, y = mean(langIa, na.rm = T) + 400, label = "Average") +
annotate("text", x = 55, y = 4000, angle=90, label = "*") +
scale_fill_manual(name="",values=c("#D6604D", "goldenrod1", "#4393C3", "slateblue4"))
#+
#  scale_x_date (date_labels = "%Y", date_breaks = "10 years", limits = c(as.Date("1960-01-01"), as.Date("2020-01-01")), expand = c(0,0))
#pdf("/Users/jasper/GIT/Jonkershoek/Output/dwarsberg_annual_streamflow2016.pdf", height = 5, width = 12)
#as
#dev.off()
#png("/Users/jasper/GIT/Jonkershoek/Output/dwarsberg_annual_streamflow2016.png", height = 5, width = 12, units = "in", res=600)
#as
#dev.off()
###Fetch weather data
#Historical data from Cape Nature 17B
cn <- read_excel("Weatherdata/Monthly high elevation rainfall_Cape Nature.xls", sheet = 4, skip = 1)
mcn <- melt(cn[,1:13], id = "Year")
mcn$Date <- as.Date(paste0(mcn$Year, "-", as.numeric(mcn$variable), "-01"), format = "%Y-%m-%d", tz="Africa/Johannesburg")
dbgH <- xts(mcn$value, order.by = mcn$Date)
#dbgH <- read.csv("Weatherdata/Dwarsberg rainfall data_Jasper/Historic Dwarsberg rainfall 2_Allsopp2015.csv")
#dbgH$Comment <- rep("", nrow(dbgH))
#dbgH$Date <- strptime(substr(dbgH$Date, 1, 10), format = "%Y-%m-%d")#, tz="Africa/Johannesburg")
#dbgH <- xts(dbgH$Value, order.by = dbgH$Date)
#New
dbgHrs <- read.csv("Weatherdata/Dwarsberg rainfall data_Jasper/Dwarsberg hourly rainfall.csv")
x <- gsub("T", " ", dbgHrs$Date)
x <- gsub("+02:00", "", x, fixed=T)
x <- gsub(".000", "", x, fixed=T)
dbgHrs$Date <- strptime(x, format = "%Y-%m-%d %H:%M:%S")#, tz="Africa/Johannesburg")
dbgHrs <- xts(dbgHrs$DataValue, order.by = dbgHrs$Date)
dbgN <- apply.monthly(dbgHrs, "sum", na.rm=F)
index(dbgN) <- as.Date(paste0(substr(index(dbgN), 1, 7), "-01"), format = "%Y-%m-%d")
#Bind data
dbgm <- c(dbgH["/2013-02-01"], dbgN)
names(dbgm) <- "Summed.rainfall"
# dbg <- rbind(dbgH, dbgN)
# x <- substr(dbg$Date, 1, 10)
# #x <- gsub("T", " ", dbg$Date)
# #x <- gsub("+02:00", "", x, fixed=T)
# #dbg$Date <- strptime(x, format = "%Y-%m-%d %H:%M:%S", tz="Africa/Johannesburg")
# dbg$Date <- strptime(x, format = "%Y-%m-%d", tz="Africa/Johannesburg")
# dbg <- xts(dbg$Value, order.by = dbg$Date)
# #dbg <- merge(dbg, timeBasedSeq(paste("1991-09-01", end(dbg), sep="::"))) #Fill in missing dates (with NA)
# #dbg <- na.approx(dbg, maxgap=720) #interpolate missing values (up to a day)
# tzone(dbg) <- "Africa/Johannesburg"
#Calculate monthly and annual summaries
dbgm <- dbgm[-nrow(dbgm),] #Drop last current (incomplete) month
dbga <- apply.yearly(dbgm, "sum", na.rm=F)
dbga <- dbga[-nrow(dbga),] #Drop last current (incomplete) year
#Make summaries for barplot
xR <- as_tibble(data.frame(Rainfall = dbgm[,1], Date = time(dbgm)))
sumsR <- summarise(group_by(xR, months(Date, abbreviate=T)), mean(Summed.rainfall, na.rm=T))
colnames(sumsR) <- c("Month", "Rainfall")
sumsR$Month <- as.factor(sumsR$Month)
sumsR$Month <- reorder(sumsR$Month, c(4,8,12,2,1,7,6,3,5,11,10,9)) #c(5,4,8,1,9,7,6,2,12,11,10,3))
sumsR <- sumsR[order(sumsR$Month),]
#summarise(group_by(xR, months(Date, abbreviate=T)), min(Summed.rainfall, na.rm=T))
#Minimum by month
#test <- subset(xR, months(Date, abbreviate=T) == "Jul") #Select a month
#test[order(test$Summed.rainfall),]
#test <- subset(xR, months(Date, abbreviate=T) %in% month.abb) #Select a month
#test[order(test$Summed.rainfall),]
#Calculate confidence intervals
sds <- summarise(group_by(xR, months(Date, abbreviate=T)), sd(Summed.rainfall, na.rm=T)) #Standard deviation
colnames(sds) <- c("Month", "Summed.rainfall")
sds$Month <- as.factor(sds$Month)
sds$Month <- reorder(sds$Month, c(4,8,12,2,1,7,6,3,5,11,10,9)) #c(5,4,8,1,9,7,6,2,12,11,10,3)
sds <- sds[order(sds$Month),]
sumsR$RainfallCI <- (sds$Summed.rainfall / sqrt(nrow(xR)/12)) *qt(0.975/2 + .5, sqrt(nrow(xR)/12-1)) #convert to standard error and then confidence interval
#Calculate cumulative rainfall
m2015 <- data.frame(Month = levels(sumsR$Month), Rainfall = as.numeric(dbgm["2015"]), RainfallCI = NA) # All months in 2015
m2016 <- as.numeric(dbgm["2016"])
m2016 <- data.frame(Month = levels(sumsR$Month)[1:length(m2016)], Rainfall = m2016, RainfallCI = NA) # All months in 2016
m2017 <- as.numeric(dbgm["2017"])
m2017 <- data.frame(Month = levels(sumsR$Month)[1:length(m2017)], Rainfall = m2017, RainfallCI = NA) # All months in 2017
m2018 <- as.numeric(dbgm["2018"])
m2018 <- data.frame(Month = levels(sumsR$Month)[1:length(m2018)], Rainfall = m2018, RainfallCI = NA) # All months in 2018
m2019 <- as.numeric(dbgm["2019"])
m2019 <- data.frame(Month = levels(sumsR$Month)[1:length(m2019)], Rainfall = m2019, RainfallCI = NA) # All months in 2019
m2020 <- as.numeric(dbgm["2020"])
m2020 <- data.frame(Month = levels(sumsR$Month)[1:length(m2020)], Rainfall = m2020, RainfallCI = NA) # All months in 2020
m2021 <- as.numeric(dbgm["2021"])
m2021 <- data.frame(Month = levels(sumsR$Month)[1:length(m2021)], Rainfall = m2021, RainfallCI = NA) # All months in 2021
sumsR$Cumulative_Rainfall <- cumsum(sumsR$Rainfall)
m2015$Cumulative_Rainfall <- cumsum(m2015$Rainfall)
m2016$Cumulative_Rainfall <- cumsum(m2016$Rainfall)
m2017$Cumulative_Rainfall <- cumsum(m2017$Rainfall)
m2018$Cumulative_Rainfall <- cumsum(m2018$Rainfall)
m2019$Cumulative_Rainfall <- cumsum(m2019$Rainfall)
m2020$Cumulative_Rainfall <- cumsum(m2020$Rainfall)
m2021$Cumulative_Rainfall <- cumsum(m2021$Rainfall)
monthvalsR <- rbind(sumsR, m2015, m2016, m2017, m2018, m2019, m2020, m2021)
monthvalsR$Time <- c(rep("Mean (1945 to current)", 12), rep("2015", 12), rep("2016", nrow(m2016)), rep("2017", nrow(m2017)), rep("2018", nrow(m2018)), rep("2019", nrow(m2019)), rep("2020", nrow(m2020)), rep("2021", nrow(m2021)))
monthvalsR$Missing <- ""
monthvalsR$Missing[which(monthvalsR$Time==2015 & monthvalsR$Month %in% c("May", "Jun", "Jul"))] <- "*"
#Calculate annual summer and winter rainfall
#Calculate Summer rainfall
Summer1 = apply.yearly(dbgm[.indexmon(dbgm) %in% 9:11], "sum", na.rm=F)  # last summer months for all years (note zero-based indexing!)
Summer2 = apply.yearly(dbgm[.indexmon(dbgm) %in% 0:2], "sum", na.rm=F)  # Summer months for all years (note zero-based indexing!)
Summer1$Year <- format(index(Summer1),"%Y")
Summer2$Year <- format(index(Summer2),"%Y")
Summer2$Year <- Summer2$Year - 1
names(Summer1)[1] <- "Rain"
Hmm <- merge(as.data.frame(Summer1), as.data.frame(Summer2))
Summer <- data.frame(Year = Hmm$Year, Summed.rainfall = rowSums(Hmm[,2:3]), Season = "Summer")
#Calculate Winter rainfall
Winter = apply.yearly(dbgm[.indexmon(dbgm) %in% c(3:8)], "sum", na.rm=F)
Winter$Year <- format(index(Winter),"%Y")
Winter <- as.data.frame(Winter)
Winter$Season <- "Winter"
if (length(which(Winter$Year == format(Sys.time(), "%Y")))>1) {
if (format(Sys.time(), "%m")<10) {Winter <- Winter[-which(Winter$Year == format(Sys.time(), "%Y")),]}} #Drop current year if "winter" period is not complete
#Highlight driest summers and winters
Winter$Season[which(Winter$Summed.rainfall < quantile(Winter$Summed.rainfall, 0.1))] <- "Winter (lowest 10%)"
Summer$Season <- as.character(Summer$Season)
Summer$Season[which(Summer$Summed.rainfall < quantile(Summer$Summed.rainfall, 0.1, na.rm = T))] <- "Summer (lowest 10%)"
#Combine summer and winter rainfall
dat <- rbind(Winter, Summer)
#dat$Year <- as.factor(dat$Year)
ar <- ggplot(dat, aes(Year, y = Summed.rainfall, fill=as.factor(Season))) +
geom_bar(stat="identity") +
scale_x_continuous(limits = c(1960, NA), breaks = seq(1960, max(sdat$Year)+5, 5)) +
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +
ylab(bquote("Rainfall (mm)")) +
geom_hline(yintercept = mean(dbga, na.rm = T)) +
geom_vline(xintercept = 47.5, linetype=3) +
geom_vline(xintercept = 68.5, linetype=3) +
annotate("text", x = 4, y = mean(dbga, na.rm = T) + 200, label = "Average") +
annotate("text", x = (47+68)/2, y = -100, angle=0, label = "Volunteer data (1992-2013)") +
scale_fill_manual(name="",values=c("#D6604D", "goldenrod1", "#4393C3", "slateblue4"))
#pdf("/Users/jasper/GIT/Jonkershoek/Output/dwarsberg_annual_rainfall2016.pdf", height = 5, width = 12)
#ar
#dev.off()
#png("/Users/jasper/GIT/Jonkershoek/Output/dwarsberg_annual_rainfall2016.png", height = 5, width = 12, units = "in", res=600)
#ar
#dev.off()
#write.csv(as.data.frame(dbgm), "/Users/jasper/Dropbox/Public/DwarsbergMonthlyRainfallSept2018.csv", row.names = T)
#write.csv(as.data.frame(langIm), "/Users/jasper/Dropbox/Public/LangrivierMonthlyStreamflowSept2018.csv")
View(monthvalsR)
View(m2021)
as.numeric(dbgm["2021"])
View(dbgm)
dbgHrs <- read.csv("Weatherdata/Dwarsberg rainfall data_Jasper/Dwarsberg hourly rainfall.csv")
#Bind data
dbgm <- c(dbgH["/2013-02-01"], dbgN)
names(dbgm) <- "Summed.rainfall"
View(dbgm)
View(dbgN)
View(dbgHrs)
dbgHrsT <- na.approx(dbgHrs, maxgap=720) #interpolate missing values (up to a month)
View(dbgHrsT)
getwd()
if(Sys.getenv("USER") == "jasper") {setwd("/home/jasper/Dropbox/Shared/Jonkershoek Weather and Streamflow/")}
#New
dbgHrs <- read.csv("Weatherdata/Dwarsberg rainfall data_Jasper/Dwarsberg hourly rainfall.csv")
setwd("/home/jasper/Dropbox/Shared/Jonkershoek Weather and Streamflow/")
dbgHrs <- read.csv("Weatherdata/Dwarsberg rainfall data_Jasper/Dwarsberg hourly rainfall.csv")
x <- gsub("T", " ", dbgHrs$Date)
x <- gsub("+02:00", "", x, fixed=T)
x <- gsub(".000", "", x, fixed=T)
dbgHrs$Date <- strptime(x, format = "%Y-%m-%d %H:%M:%S")#,
dbgHrs <- xts(dbgHrs$DataValue, order.by = dbgHrs$Date)
dbgHrsT <- na.approx(dbgHrs, maxgap=720) #interpolate missing values (up to a month)
View(dbgHrs)
View(dbgHrsT)
dbgHrsT <- na.approx(dbgHrs, maxgap=720) #interpolate missing values (up to a month)
View(ldat)
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
250*40
250*40*2
250*35*2
250*40*2 + 5850*5/3
4125/3/25
4125/3
4125/25
4125/25*40
250*40*2 + 5850*5/3 + 4125/25*40
250*40*2 + 5850*5/3 + 3000 + 4125/25*40
250*40*2 + 5850*5/3 + 3000 + 4125/25*40 #accom + veh + fuel + subst
